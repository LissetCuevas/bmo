[%# This Source Code Form is subject to the terms of the Mozilla Public
  # License, v. 2.0. If a copy of the MPL was not distributed with this
  # file, You can obtain one at http://mozilla.org/MPL/2.0/.
  #
  # This Source Code Form is  |  "Incompatible With Secondary Licenses", as
  # defined by the Mozilla Public License, v. 2.0.
  #%]

[% PROCESS global/header.html.tmpl
   title = "Webhooks Documentation"
   style = "#bugzilla-body li {
              margin: 5px
            }
            h4 {
              margin-bottom: 0px
            }
            .heading {
              font-weight: bold
            }
            #main-inner{
              margin-left: 20%;
              margin-right: 20%;
              margin-bottom: 5%
            }
            "
%]

<h1>Bugzilla Webhooks</h1>

<p>A webhook is a custom callback defined by events. Is triggered when those events happen, and a POST
request is sent to a defined URL.</p>

<p>In the case of Bugzilla, a WebHook can be triggered by a change to, or creation of a bug, the
parameters of the bug are exposed to the WebHook handler which makes a callback (over HTTP) to another
web application.</p>

<p>Examples of Bugzilla WebHooks could include:</p>
<ul>
  <li>Updating a copy of the Bugzilla bug in another system such as Jira</li>
  <li>Sending a message to a chat server such as Matrix or Slack</li>
</ul>

<h2>Creating a webhook</h2>
<p>To create a webhook you just need to follow the next steps:</p>
<ol>
  <li>Access to your Bugzilla Account.</li>
  <li>Go to your Preferences Panel > Webhooks.</li>
  <li>Fill all the parameters:</li>
    <h4>Name</h4>
    <p>A name for you to recognize the webhook. (e.g. “My Jira webhook”)</p>

    <h4>URL</h4>
    <p>A valid URL where the callback will be sent.</p>

    <h4>Events</h4>
    <p>The bug events that will trigger your new webhook</p>
      <ul>
        <li><b>create</b>: when a new bug is created.</li>
        <li><b>change</b>: when an existing bug has some change.</li>
      </ul>

    <h4>Filters</h4>
    <p>Properties of a bug that specify which bugs you will receive.</p>
      <ul>
        <li><b>product</b>: name of the product of the bugs that you want to receive.</li>
        <li><b>component</b>: name of the component of the product that is selected of the
        bugs that you want to receive.  If you want to receive the bugs of all the components
        of a product, select Any.</li>
      </ul>
    <br>
  <li>Add the webhook.</li>
</ol>

<p>You can see your registered webhooks in the same Panel.</p>
<p>If you want to delete a webhook, select the webhook in “Your webhooks” table and click remove
selected. You can select more than one.</p>

<h2>Delivered webhook</h2>
<p>When a webhook is triggered the HTTP POST of a fixed JSON structure payload that is delivered
contains the webhook_id, webhook_name and the information about the bug that matches the event and filters.</p>

<p>If the bug is private, only the bug id and some other basic information is sent and the external system will
need to query BMO over the REST API to get the actual details of the bug.</p>

<p>The webhooks will be called in the same order as the events triggering them and will be one request per new
bug and per changed bug. The "changes" parameter will be sent only when the triggered event is changed and will
content every change made in the Bug.</p>

<h4>Public Bug Request</h4>
<xmp>{
"webhook_id": 23,
"webhook_name": "Example webhook",
"event": {
      "action": "create",
      "time": "2020-07-24T20:11:22",
      "user": {
          "id": 1,
            "login": "admin@bmo.test",
            "real_name": "Vagrant User"
      },
      "changes": [
          {
            "field": "priority",
            "removed": "P3",
            "added": "P1"
            }
        ],
},
"bug": {
      "version": {
            "name": "unspecified",
            "id": 1
      },
      "qa_contact": null,
      "product": {
            "id": 1,
            "name": "TestProduct"
      },
      "creation_time": "2020-07-23T00:01:45",
      "resolution": "",
      "flags": [],
      "classification": "Unclassified",
      "url": "",
      "type": "enhancement",
      "operating_system": "Linux",
      "keywords": [],
      "status": {
            "name": "CONFIRMED",
            "id": 2
      },
      "last_change_time": "2020-07-23T00:01:45",
      "is_private": false,
      "severity": "normal",
      "summary": "TestBug",
      "alias": "",
      "reporter": {
            "id": 1,
            "real_name": "Vagrant User",
            "login": "admin@bmo.test"
      },
      "assigned_to": {
          "id": 1,
            "login": "admin@bmo.test",
            "real_name": "Vagrant User"
        },
      "platform": "PC",
      "id": 11,
      "priority": "P1",
      "target_milestone": null,
      "cf_user_story": "",
      "cf_last_resolved": null,
      "whiteboard": "",
      "component": {
            "id": 2,
            "name": "TestComponent"
      }
   }
}</xmp>

<h4>Private Bug Request</h4>
<xmp>{
"webhook_id": 23,
"webhook_name": "Example webhook",
"event": {
      "action": "change",
      "time": "2020-07-24T20:11:22",
      "user": {
          "id": 1,
            "login": "admin@bmo.test",
            "real_name": "Vagrant User"
      },
},
"bug": {
      "id": 2,
      "is_private": true
      }
}</xmp>

<h4>Response</h4>
<p>HTTP 200 OK. The request has succeeded.</p>

<h4>Errors</h4>
<p>If the response is not 200, the Bugzilla system will retry 4 attempts, waiting 5s, 10s, 15s and
20s between each attempt. If none of those attempts is successful, the system will continue trying
every 15 minutes.</p>

<p>If a message is stuck without a successful attempt, the next messages that trigger the webhook
will be stored in a queue in the order that were triggered and will be delivered in that order when
the first message in the queue is delivered.</p>

[% INCLUDE global/footer.html.tmpl %]
